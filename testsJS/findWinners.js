var findWinners = require('../index.js');
var expect = require('chai').expect;

describe('findWinners()', function () {

    context("Single punter, single winner", function () {
        it("should return the only one", function () {
            expect(findWinners(1.50, [{ addr: "0x01", price: 1.25 }]))
                .to.deep.equal([{ addr: "0x01", price: 1.25 }]);
        })
    });

    context("Two punters, single winner", function () {
        it("the winner is the one above", function () {
            expect(findWinners(1.50, [{ addr: "0x01", price: 1.25 }, {addr: "0x02", price: 1.55}]))
                .to.deep.equal([{ addr: "0x02", price: 1.55 }]);
        })

        it("the winner is the one below", function () {
            expect(findWinners(1.28, [{ addr: "0x01", price: 1.25 }, {addr: "0x02", price: 1.35}]))
                .to.deep.equal([{ addr: "0x01", price: 1.25 }]);
        })

        it("the winner is the one with more precision", function () {
            expect(findWinners(1.284567, [{ addr: "0x01", price: 1.284556 }, {addr: "0x02", price: 1.28}]))
                .to.deep.equal([{ addr: "0x01", price: 1.284556 }]);
        })
    });

    context("Two punters, two winners", function () {
        it("should return both winners", function () {
            expect(findWinners(1.50, [{ addr: "0x01", price: 1.25 }, {addr: "0x02", price: 1.75}]))
                .to.deep.equal([{ addr: "0x01", price: 1.25 }, {addr: "0x02", price: 1.75}]);
        })
    });

    
    context("One punter, two bets, one winner", function () {
        it("should return the winner", function () {
            expect(findWinners(1.50, [{ addr: "0x01", price: 1.25 }, {addr: "0x01", price: 1.85}]))
                .to.deep.equal([{ addr: "0x01", price: 1.25 }]);
        })
    });

    context("Two punters, two bets each, one winner", function () {
        it("should return the winner", function () {
            expect(findWinners(1.85, [{ addr: "0x01", price: 1.25 }, {addr: "0x02", price: 1.85}, { addr: "0x01", price: 1.30 }, {addr: "0x02", price: 1.45}]))
                .to.deep.equal([{ addr: "0x02", price: 1.85 }]);
        })
    });

    context("Many punters, autogenerated, one winner", function () {
        var punters = Array(1000).fill().map((_, index) => ( {'addr': '0x'+index, 'price': 1 + index/100}) )

        it("should return the winner", function () {
            expect(findWinners(2.25, punters))
                .to.deep.equal([{ addr: "0x125", price: 2.25 }]);
        })
    });
})